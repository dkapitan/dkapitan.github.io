<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>@kapitan</title>
<link>https://masteringdata.ai/src/blog/listing.html</link>
<atom:link href="https://masteringdata.ai/src/blog/listing.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Thu, 10 Mar 2022 00:00:00 GMT</lastBuildDate>
<item>
  <title>Analytical problem solving</title>
  <dc:creator>Daniel Kapitan</dc:creator>
  <link>https://masteringdata.ai/src/blog/posts/analytical-problem-solving.html</link>
  <description><![CDATA[ 



<p><object data="/resources/demast2023analytical.pdf" type="application/pdf" width="100%" height="800"><p>Unable to display PDF file. <a href="../../../resources/demast2023analytical.pdf">Download</a> instead.</p></object></p>



 ]]></description>
  <category>modeling</category>
  <guid>https://masteringdata.ai/src/blog/posts/analytical-problem-solving.html</guid>
  <pubDate>Thu, 10 Mar 2022 00:00:00 GMT</pubDate>
  <media:content url="https://masteringdata.ai/src/blog/posts/logo-american-statistician.png" medium="image" type="image/png" height="79" width="144"/>
</item>
<item>
  <title>Comet charts in Python</title>
  <dc:creator>Daniel Kapitan</dc:creator>
  <link>https://masteringdata.ai/src/blog/posts/comet-chart.html</link>
  <description><![CDATA[ 



<p><a href="https://www.zanarmstrong.com/#/infovisresearch/">Zan Armstrong’s comet chart</a> has been on my list of hobby projects for a while now. I think it is an elegant solution to visualize statistical mix effects and address Simpson’s paradox, and particularly useful when working with longitudinal data involving different sub-populations. Recently I found a good excuse to spend some time to actually use it as part of a exploratory data analysis on a project.</p>
<p>Since I mostly work in Python and have recently fallen in love with <a href="https://altair-viz.github.io/index.html">Altair</a> — for the same reasons as <a href="http://fernandoi.cl/blog/posts/altair/">Fernando explains here</a> — I wondered how the comet chart could be implemented using the <a href="https://idl.cs.washington.edu/papers/vega-lite/">grammar of interactive graphics</a>. It took me a while to figure out how to actually plot the comets. In a previous version, I had <a href="https://github.com/dkapitan/comet-chart/blob/master/comet-chart.ipynb">drawn glyphs using Boke</a>. While Altair allows you to plot any SVG path in a graph, this felt a bit hacky and not quite in line with the philosophy of using a grammar of graphics.</p>
<p>Thankfully <a href="https://github.com/altair-viz/altair/issues/2395#issuecomment-766454328">Mattijn was quick to suggest using trail-marks</a>, after which it was almost as easy as pie. So here’s an example using a dataset of 20,000 flights for 59 destination airports.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> altair <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> alt</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> vega_datasets</span>
<span id="cb1-4"></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use airline data to assess statistical mix effects of delays</span></span>
<span id="cb1-7">flights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vega_datasets.data.flights_20k()</span>
<span id="cb1-8">aggregation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(</span>
<span id="cb1-9">    number_of_flights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"destination"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"count"</span>),</span>
<span id="cb1-10">    mean_delay<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"delay"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>),</span>
<span id="cb1-11">    mean_distance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distance"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>),</span>
<span id="cb1-12">)</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compare delays by destination between month 1 and 3</span></span>
<span id="cb1-15">grouped <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> flights.groupby(by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[flights.destination, flights.date.dt.month])</span>
<span id="cb1-16">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb1-17">    grouped.agg(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>aggregation)</span>
<span id="cb1-18">    .loc[(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">slice</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>), [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]), :]</span>
<span id="cb1-19">    .assign(</span>
<span id="cb1-20">        change_mean_delay<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> df:</span>
<span id="cb1-21">            df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"destination"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean_delay"</span>].diff(),</span>
<span id="cb1-22">    )</span>
<span id="cb1-23">    .fillna(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bfill"</span>)</span>
<span id="cb1-24">    .reset_index()</span>
<span id="cb1-25">    .<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-26">)</span>
<span id="cb1-27"></span>
<span id="cb1-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate weigthed average of delays for month 1 and 3</span></span>
<span id="cb1-29">total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb1-30">    flights.groupby(flights.date.dt.month)</span>
<span id="cb1-31">    .agg(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>aggregation)</span>
<span id="cb1-32">    .loc[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], :]</span>
<span id="cb1-33">    .assign(</span>
<span id="cb1-34">        change_mean_delay<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> df: df.mean_delay.diff(),</span>
<span id="cb1-35">        destination<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TOTAL'</span></span>
<span id="cb1-36">    )</span>
<span id="cb1-37">    .fillna(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bfill"</span>)</span>
<span id="cb1-38">    .<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-39">    .reset_index()</span>
<span id="cb1-40">    .loc[:, df.columns]</span>
<span id="cb1-41">)</span>
<span id="cb1-42"></span>
<span id="cb1-43"></span>
<span id="cb1-44"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> comet_chart(df, stroke<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>):</span>
<span id="cb1-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (</span>
<span id="cb1-46">    alt.Chart(df, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span>)</span>
<span id="cb1-47">    .mark_trail(stroke<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>stroke)</span>
<span id="cb1-48">    .encode(</span>
<span id="cb1-49">        x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>alt.X(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number_of_flights"</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>alt.Scale(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log"</span>)),</span>
<span id="cb1-50">        y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>alt.Y(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean_delay"</span>),</span>
<span id="cb1-51">        detail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"destination"</span>,</span>
<span id="cb1-52">        size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>alt.Size(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>alt.Scale(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]), legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>),</span>
<span id="cb1-53">        tooltip<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb1-54">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"destination"</span>,</span>
<span id="cb1-55">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number_of_flights"</span>,</span>
<span id="cb1-56">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean_delay"</span>,</span>
<span id="cb1-57">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"change_mean_delay"</span>,</span>
<span id="cb1-58">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean_distance"</span>,</span>
<span id="cb1-59">        ],</span>
<span id="cb1-60">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># trails don't support continuous color</span></span>
<span id="cb1-61">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># see https://github.com/vega/vega/issues/1187</span></span>
<span id="cb1-62">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hence use bins</span></span>
<span id="cb1-63">        color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>alt.Color(</span>
<span id="cb1-64">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"change_mean_delay:Q"</span>,</span>
<span id="cb1-65">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bin</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>alt.Bin(step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb1-66">            scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>alt.Scale(scheme<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blueorange"</span>),</span>
<span id="cb1-67">            legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>alt.Legend(orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top"</span>),</span>
<span id="cb1-68">        ),</span>
<span id="cb1-69">    )</span>
<span id="cb1-70">)</span>
<span id="cb1-71"></span>
<span id="cb1-72"></span>
<span id="cb1-73">comet_chart(df) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> comet_chart(total, stroke<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">

<style>
  #altair-viz-3ab1ee1b5f1b41978154b09317043f30.vega-embed {
    width: 100%;
    display: flex;
  }

  #altair-viz-3ab1ee1b5f1b41978154b09317043f30.vega-embed details,
  #altair-viz-3ab1ee1b5f1b41978154b09317043f30.vega-embed details summary {
    position: relative;
  }
</style>
<div id="altair-viz-3ab1ee1b5f1b41978154b09317043f30"></div>
<script type="text/javascript">
  var VEGA_DEBUG = (typeof VEGA_DEBUG == "undefined") ? {} : VEGA_DEBUG;
  (function(spec, embedOpt){
    let outputDiv = document.currentScript.previousElementSibling;
    if (outputDiv.id !== "altair-viz-3ab1ee1b5f1b41978154b09317043f30") {
      outputDiv = document.getElementById("altair-viz-3ab1ee1b5f1b41978154b09317043f30");
    }
    const paths = {
      "vega": "https://cdn.jsdelivr.net/npm/vega@5?noext",
      "vega-lib": "https://cdn.jsdelivr.net/npm/vega-lib?noext",
      "vega-lite": "https://cdn.jsdelivr.net/npm/vega-lite@5.8.0?noext",
      "vega-embed": "https://cdn.jsdelivr.net/npm/vega-embed@6?noext",
    };

    function maybeLoadScript(lib, version) {
      var key = `${lib.replace("-", "")}_version`;
      return (VEGA_DEBUG[key] == version) ?
        Promise.resolve(paths[lib]) :
        new Promise(function(resolve, reject) {
          var s = document.createElement('script');
          document.getElementsByTagName("head")[0].appendChild(s);
          s.async = true;
          s.onload = () => {
            VEGA_DEBUG[key] = version;
            return resolve(paths[lib]);
          };
          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);
          s.src = paths[lib];
        });
    }

    function showError(err) {
      outputDiv.innerHTML = `<div class="error" style="color:red;">${err}</div>`;
      throw err;
    }

    function displayChart(vegaEmbed) {
      vegaEmbed(outputDiv, spec, embedOpt)
        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));
    }

    if(typeof define === "function" && define.amd) {
      requirejs.config({paths});
      require(["vega-embed"], displayChart, err => showError(`Error loading script: ${err.message}`));
    } else {
      maybeLoadScript("vega", "5")
        .then(() => maybeLoadScript("vega-lite", "5.8.0"))
        .then(() => maybeLoadScript("vega-embed", "6"))
        .catch(showError)
        .then(() => displayChart(vegaEmbed));
    }
  })({"config": {"view": {"continuousWidth": 300, "continuousHeight": 300}}, "layer": [{"data": {"name": "data-a7c4f0a37e833a2ec7f146393c80c529"}, "mark": {"type": "trail", "stroke": "white"}, "encoding": {"color": {"bin": {"step": 2}, "field": "change_mean_delay", "legend": {"orient": "top"}, "scale": {"scheme": "blueorange"}, "type": "quantitative"}, "detail": {"field": "destination", "type": "nominal"}, "size": {"field": "date", "legend": null, "scale": {"range": [0, 10]}, "type": "quantitative"}, "tooltip": [{"field": "destination", "type": "nominal"}, {"field": "number_of_flights", "type": "quantitative"}, {"field": "mean_delay", "type": "quantitative"}, {"field": "change_mean_delay", "type": "quantitative"}, {"field": "mean_distance", "type": "quantitative"}], "x": {"field": "number_of_flights", "scale": {"type": "log"}, "type": "quantitative"}, "y": {"field": "mean_delay", "type": "quantitative"}}}, {"data": {"name": "data-40bf7cbec64784a4ce18b48588df5dc9"}, "mark": {"type": "trail", "stroke": "black"}, "encoding": {"color": {"bin": {"step": 2}, "field": "change_mean_delay", "legend": {"orient": "top"}, "scale": {"scheme": "blueorange"}, "type": "quantitative"}, "detail": {"field": "destination", "type": "nominal"}, "size": {"field": "date", "legend": null, "scale": {"range": [0, 10]}, "type": "quantitative"}, "tooltip": [{"field": "destination", "type": "nominal"}, {"field": "number_of_flights", "type": "quantitative"}, {"field": "mean_delay", "type": "quantitative"}, {"field": "change_mean_delay", "type": "quantitative"}, {"field": "mean_distance", "type": "quantitative"}], "x": {"field": "number_of_flights", "scale": {"type": "log"}, "type": "quantitative"}, "y": {"field": "mean_delay", "type": "quantitative"}}}], "height": 450, "width": 600, "$schema": "https://vega.github.io/schema/vega-lite/v5.8.0.json", "datasets": {"data-a7c4f0a37e833a2ec7f146393c80c529": [{"destination": "ABQ", "date": 1, "number_of_flights": 129, "mean_delay": 7.98, "mean_distance": 552.15, "change_mean_delay": -0.45}, {"destination": "ABQ", "date": 3, "number_of_flights": 164, "mean_delay": 7.53, "mean_distance": 568.41, "change_mean_delay": -0.45}, {"destination": "ALB", "date": 1, "number_of_flights": 36, "mean_delay": 7.03, "mean_distance": 570.72, "change_mean_delay": 4.2}, {"destination": "ALB", "date": 3, "number_of_flights": 22, "mean_delay": 11.23, "mean_distance": 536.55, "change_mean_delay": 4.2}, {"destination": "AMA", "date": 1, "number_of_flights": 18, "mean_delay": 12.0, "mean_distance": 313.56, "change_mean_delay": -1.41}, {"destination": "AMA", "date": 3, "number_of_flights": 22, "mean_delay": 10.59, "mean_distance": 383.18, "change_mean_delay": -1.41}, {"destination": "AUS", "date": 1, "number_of_flights": 124, "mean_delay": 5.31, "mean_distance": 450.31, "change_mean_delay": 4.71}, {"destination": "AUS", "date": 3, "number_of_flights": 124, "mean_delay": 10.02, "mean_distance": 467.61, "change_mean_delay": 4.71}, {"destination": "BDL", "date": 1, "number_of_flights": 32, "mean_delay": 17.62, "mean_distance": 509.41, "change_mean_delay": -4.91}, {"destination": "BDL", "date": 3, "number_of_flights": 49, "mean_delay": 12.71, "mean_distance": 555.51, "change_mean_delay": -4.91}, {"destination": "BHM", "date": 1, "number_of_flights": 77, "mean_delay": 6.47, "mean_distance": 516.97, "change_mean_delay": -0.04}, {"destination": "BHM", "date": 3, "number_of_flights": 77, "mean_delay": 6.43, "mean_distance": 504.38, "change_mean_delay": -0.04}, {"destination": "BNA", "date": 1, "number_of_flights": 216, "mean_delay": 8.24, "mean_distance": 776.31, "change_mean_delay": -1.75}, {"destination": "BNA", "date": 3, "number_of_flights": 227, "mean_delay": 6.48, "mean_distance": 714.56, "change_mean_delay": -1.75}, {"destination": "BOI", "date": 1, "number_of_flights": 44, "mean_delay": 11.11, "mean_distance": 352.68, "change_mean_delay": -10.29}, {"destination": "BOI", "date": 3, "number_of_flights": 35, "mean_delay": 0.83, "mean_distance": 349.97, "change_mean_delay": -10.29}, {"destination": "BUF", "date": 1, "number_of_flights": 19, "mean_delay": -3.53, "mean_distance": 734.58, "change_mean_delay": -4.3}, {"destination": "BUF", "date": 3, "number_of_flights": 28, "mean_delay": -7.82, "mean_distance": 809.11, "change_mean_delay": -4.3}, {"destination": "BUR", "date": 1, "number_of_flights": 121, "mean_delay": 10.31, "mean_distance": 302.52, "change_mean_delay": -1.1}, {"destination": "BUR", "date": 3, "number_of_flights": 127, "mean_delay": 9.21, "mean_distance": 307.75, "change_mean_delay": -1.1}, {"destination": "BWI", "date": 1, "number_of_flights": 301, "mean_delay": 5.23, "mean_distance": 602.16, "change_mean_delay": -0.03}, {"destination": "BWI", "date": 3, "number_of_flights": 302, "mean_delay": 5.2, "mean_distance": 624.67, "change_mean_delay": -0.03}, {"destination": "CLE", "date": 1, "number_of_flights": 53, "mean_delay": 14.4, "mean_distance": 369.08, "change_mean_delay": -8.11}, {"destination": "CLE", "date": 3, "number_of_flights": 60, "mean_delay": 6.28, "mean_distance": 360.93, "change_mean_delay": -8.11}, {"destination": "CMH", "date": 1, "number_of_flights": 32, "mean_delay": 8.88, "mean_distance": 505.91, "change_mean_delay": -3.51}, {"destination": "CMH", "date": 3, "number_of_flights": 30, "mean_delay": 5.37, "mean_distance": 481.0, "change_mean_delay": -3.51}, {"destination": "CRP", "date": 1, "number_of_flights": 20, "mean_delay": 10.85, "mean_distance": 187.0, "change_mean_delay": 3.77}, {"destination": "CRP", "date": 3, "number_of_flights": 21, "mean_delay": 14.62, "mean_distance": 187.0, "change_mean_delay": 3.77}, {"destination": "DAL", "date": 1, "number_of_flights": 304, "mean_delay": 3.37, "mean_distance": 299.76, "change_mean_delay": 3.46}, {"destination": "DAL", "date": 3, "number_of_flights": 372, "mean_delay": 6.83, "mean_distance": 293.83, "change_mean_delay": 3.46}, {"destination": "DTW", "date": 1, "number_of_flights": 45, "mean_delay": 8.02, "mean_distance": 334.04, "change_mean_delay": 0.79}, {"destination": "DTW", "date": 3, "number_of_flights": 37, "mean_delay": 8.81, "mean_distance": 347.19, "change_mean_delay": 0.79}, {"destination": "ELP", "date": 1, "number_of_flights": 106, "mean_delay": 10.84, "mean_distance": 494.27, "change_mean_delay": -6.49}, {"destination": "ELP", "date": 3, "number_of_flights": 94, "mean_delay": 4.35, "mean_distance": 490.43, "change_mean_delay": -6.49}, {"destination": "FLL", "date": 1, "number_of_flights": 83, "mean_delay": 5.78, "mean_distance": 435.34, "change_mean_delay": 4.5}, {"destination": "FLL", "date": 3, "number_of_flights": 60, "mean_delay": 10.28, "mean_distance": 405.17, "change_mean_delay": 4.5}, {"destination": "GEG", "date": 1, "number_of_flights": 42, "mean_delay": 13.29, "mean_distance": 303.36, "change_mean_delay": -6.47}, {"destination": "GEG", "date": 3, "number_of_flights": 43, "mean_delay": 6.81, "mean_distance": 277.93, "change_mean_delay": -6.47}, {"destination": "HOU", "date": 1, "number_of_flights": 336, "mean_delay": 6.22, "mean_distance": 422.08, "change_mean_delay": 1.77}, {"destination": "HOU", "date": 3, "number_of_flights": 344, "mean_delay": 7.99, "mean_distance": 437.76, "change_mean_delay": 1.77}, {"destination": "HRL", "date": 1, "number_of_flights": 35, "mean_delay": 14.2, "mean_distance": 268.37, "change_mean_delay": -2.56}, {"destination": "HRL", "date": 3, "number_of_flights": 42, "mean_delay": 11.64, "mean_distance": 270.98, "change_mean_delay": -2.56}, {"destination": "IAH", "date": 1, "number_of_flights": 17, "mean_delay": 4.71, "mean_distance": 217.0, "change_mean_delay": -8.59}, {"destination": "IAH", "date": 3, "number_of_flights": 9, "mean_delay": -3.89, "mean_distance": 217.0, "change_mean_delay": -8.59}, {"destination": "IND", "date": 1, "number_of_flights": 58, "mean_delay": 4.69, "mean_distance": 574.14, "change_mean_delay": -0.05}, {"destination": "IND", "date": 3, "number_of_flights": 58, "mean_delay": 4.64, "mean_distance": 702.16, "change_mean_delay": -0.05}, {"destination": "ISP", "date": 1, "number_of_flights": 55, "mean_delay": 3.11, "mean_distance": 472.58, "change_mean_delay": 5.34}, {"destination": "ISP", "date": 3, "number_of_flights": 58, "mean_delay": 8.45, "mean_distance": 528.83, "change_mean_delay": 5.34}, {"destination": "JAN", "date": 1, "number_of_flights": 23, "mean_delay": 3.96, "mean_distance": 613.04, "change_mean_delay": -3.44}, {"destination": "JAN", "date": 3, "number_of_flights": 25, "mean_delay": 0.52, "mean_distance": 562.68, "change_mean_delay": -3.44}, {"destination": "JAX", "date": 1, "number_of_flights": 65, "mean_delay": 7.12, "mean_distance": 407.82, "change_mean_delay": 8.83}, {"destination": "JAX", "date": 3, "number_of_flights": 66, "mean_delay": 15.95, "mean_distance": 424.85, "change_mean_delay": 8.83}, {"destination": "LAS", "date": 1, "number_of_flights": 428, "mean_delay": 14.16, "mean_distance": 553.36, "change_mean_delay": -6.12}, {"destination": "LAS", "date": 3, "number_of_flights": 405, "mean_delay": 8.04, "mean_distance": 567.54, "change_mean_delay": -6.12}, {"destination": "LAX", "date": 1, "number_of_flights": 300, "mean_delay": 8.46, "mean_distance": 529.91, "change_mean_delay": -0.22}, {"destination": "LAX", "date": 3, "number_of_flights": 325, "mean_delay": 8.24, "mean_distance": 489.88, "change_mean_delay": -0.22}, {"destination": "LBB", "date": 1, "number_of_flights": 36, "mean_delay": 3.39, "mean_distance": 351.61, "change_mean_delay": 2.55}, {"destination": "LBB", "date": 3, "number_of_flights": 49, "mean_delay": 5.94, "mean_distance": 338.22, "change_mean_delay": 2.55}, {"destination": "LIT", "date": 1, "number_of_flights": 30, "mean_delay": 2.07, "mean_distance": 375.0, "change_mean_delay": -0.95}, {"destination": "LIT", "date": 3, "number_of_flights": 51, "mean_delay": 1.12, "mean_distance": 408.65, "change_mean_delay": -0.95}, {"destination": "MAF", "date": 1, "number_of_flights": 37, "mean_delay": 8.89, "mean_distance": 369.3, "change_mean_delay": -3.7}, {"destination": "MAF", "date": 3, "number_of_flights": 31, "mean_delay": 5.19, "mean_distance": 398.26, "change_mean_delay": -3.7}, {"destination": "MCI", "date": 1, "number_of_flights": 176, "mean_delay": 6.41, "mean_distance": 707.56, "change_mean_delay": -1.04}, {"destination": "MCI", "date": 3, "number_of_flights": 207, "mean_delay": 5.37, "mean_distance": 745.93, "change_mean_delay": -1.04}, {"destination": "MCO", "date": 1, "number_of_flights": 132, "mean_delay": 2.74, "mean_distance": 728.77, "change_mean_delay": 5.57}, {"destination": "MCO", "date": 3, "number_of_flights": 130, "mean_delay": 8.31, "mean_distance": 743.67, "change_mean_delay": 5.57}, {"destination": "MDW", "date": 1, "number_of_flights": 312, "mean_delay": 5.24, "mean_distance": 461.4, "change_mean_delay": 0.61}, {"destination": "MDW", "date": 3, "number_of_flights": 302, "mean_delay": 5.85, "mean_distance": 440.93, "change_mean_delay": 0.61}, {"destination": "MHT", "date": 1, "number_of_flights": 43, "mean_delay": 5.12, "mean_distance": 692.26, "change_mean_delay": 1.93}, {"destination": "MHT", "date": 3, "number_of_flights": 48, "mean_delay": 7.04, "mean_distance": 747.04, "change_mean_delay": 1.93}, {"destination": "MSY", "date": 1, "number_of_flights": 171, "mean_delay": 4.77, "mean_distance": 487.86, "change_mean_delay": 0.41}, {"destination": "MSY", "date": 3, "number_of_flights": 151, "mean_delay": 5.17, "mean_distance": 517.47, "change_mean_delay": 0.41}, {"destination": "OAK", "date": 1, "number_of_flights": 278, "mean_delay": 7.93, "mean_distance": 430.95, "change_mean_delay": -4.1}, {"destination": "OAK", "date": 3, "number_of_flights": 324, "mean_delay": 3.83, "mean_distance": 444.32, "change_mean_delay": -4.1}, {"destination": "OKC", "date": 1, "number_of_flights": 54, "mean_delay": 7.24, "mean_distance": 369.04, "change_mean_delay": -6.21}, {"destination": "OKC", "date": 3, "number_of_flights": 69, "mean_delay": 1.03, "mean_distance": 393.9, "change_mean_delay": -6.21}, {"destination": "OMA", "date": 1, "number_of_flights": 49, "mean_delay": 3.29, "mean_distance": 625.84, "change_mean_delay": 1.98}, {"destination": "OMA", "date": 3, "number_of_flights": 42, "mean_delay": 5.26, "mean_distance": 690.24, "change_mean_delay": 1.98}, {"destination": "ONT", "date": 1, "number_of_flights": 165, "mean_delay": 13.24, "mean_distance": 349.81, "change_mean_delay": -9.24}, {"destination": "ONT", "date": 3, "number_of_flights": 145, "mean_delay": 4.0, "mean_distance": 331.07, "change_mean_delay": -9.24}, {"destination": "PBI", "date": 1, "number_of_flights": 13, "mean_delay": 6.77, "mean_distance": 325.54, "change_mean_delay": -2.56}, {"destination": "PBI", "date": 3, "number_of_flights": 34, "mean_delay": 4.21, "mean_distance": 329.26, "change_mean_delay": -2.56}, {"destination": "PDX", "date": 1, "number_of_flights": 89, "mean_delay": 9.4, "mean_distance": 532.08, "change_mean_delay": -2.3}, {"destination": "PDX", "date": 3, "number_of_flights": 70, "mean_delay": 7.1, "mean_distance": 567.11, "change_mean_delay": -2.3}, {"destination": "PHX", "date": 1, "number_of_flights": 411, "mean_delay": 12.57, "mean_distance": 675.43, "change_mean_delay": -2.88}, {"destination": "PHX", "date": 3, "number_of_flights": 486, "mean_delay": 9.69, "mean_distance": 637.73, "change_mean_delay": -2.88}, {"destination": "PVD", "date": 1, "number_of_flights": 57, "mean_delay": 3.19, "mean_distance": 650.26, "change_mean_delay": -3.33}, {"destination": "PVD", "date": 3, "number_of_flights": 59, "mean_delay": -0.14, "mean_distance": 709.05, "change_mean_delay": -3.33}, {"destination": "RDU", "date": 1, "number_of_flights": 41, "mean_delay": 3.49, "mean_distance": 437.05, "change_mean_delay": 0.33}, {"destination": "RDU", "date": 3, "number_of_flights": 44, "mean_delay": 3.82, "mean_distance": 484.86, "change_mean_delay": 0.33}, {"destination": "RNO", "date": 1, "number_of_flights": 123, "mean_delay": 8.98, "mean_distance": 362.15, "change_mean_delay": -2.9}, {"destination": "RNO", "date": 3, "number_of_flights": 92, "mean_delay": 6.08, "mean_distance": 382.78, "change_mean_delay": -2.9}, {"destination": "SAN", "date": 1, "number_of_flights": 212, "mean_delay": 12.45, "mean_distance": 488.73, "change_mean_delay": -8.2}, {"destination": "SAN", "date": 3, "number_of_flights": 174, "mean_delay": 4.25, "mean_distance": 455.28, "change_mean_delay": -8.2}, {"destination": "SAT", "date": 1, "number_of_flights": 120, "mean_delay": 7.34, "mean_distance": 446.72, "change_mean_delay": 0.3}, {"destination": "SAT", "date": 3, "number_of_flights": 110, "mean_delay": 7.65, "mean_distance": 473.84, "change_mean_delay": 0.3}, {"destination": "SDF", "date": 1, "number_of_flights": 68, "mean_delay": 7.57, "mean_distance": 491.19, "change_mean_delay": -5.8}, {"destination": "SDF", "date": 3, "number_of_flights": 49, "mean_delay": 1.78, "mean_distance": 467.67, "change_mean_delay": -5.8}, {"destination": "SEA", "date": 1, "number_of_flights": 96, "mean_delay": 10.68, "mean_distance": 638.96, "change_mean_delay": 3.6}, {"destination": "SEA", "date": 3, "number_of_flights": 94, "mean_delay": 14.28, "mean_distance": 652.84, "change_mean_delay": 3.6}, {"destination": "SFO", "date": 1, "number_of_flights": 33, "mean_delay": 14.52, "mean_distance": 558.27, "change_mean_delay": 5.23}, {"destination": "SFO", "date": 3, "number_of_flights": 4, "mean_delay": 19.75, "mean_distance": 498.0, "change_mean_delay": 5.23}, {"destination": "SJC", "date": 1, "number_of_flights": 197, "mean_delay": 10.92, "mean_distance": 384.56, "change_mean_delay": -6.35}, {"destination": "SJC", "date": 3, "number_of_flights": 191, "mean_delay": 4.57, "mean_distance": 404.65, "change_mean_delay": -6.35}, {"destination": "SLC", "date": 1, "number_of_flights": 102, "mean_delay": 10.95, "mean_distance": 605.62, "change_mean_delay": -0.82}, {"destination": "SLC", "date": 3, "number_of_flights": 110, "mean_delay": 10.13, "mean_distance": 520.6, "change_mean_delay": -0.82}, {"destination": "SMF", "date": 1, "number_of_flights": 162, "mean_delay": 9.86, "mean_distance": 469.78, "change_mean_delay": -7.17}, {"destination": "SMF", "date": 3, "number_of_flights": 188, "mean_delay": 2.69, "mean_distance": 446.46, "change_mean_delay": -7.17}, {"destination": "SNA", "date": 1, "number_of_flights": 31, "mean_delay": 10.0, "mean_distance": 351.35, "change_mean_delay": -4.75}, {"destination": "SNA", "date": 3, "number_of_flights": 32, "mean_delay": 5.25, "mean_distance": 355.59, "change_mean_delay": -4.75}, {"destination": "STL", "date": 1, "number_of_flights": 199, "mean_delay": 5.77, "mean_distance": 478.18, "change_mean_delay": -1.5}, {"destination": "STL", "date": 3, "number_of_flights": 202, "mean_delay": 4.27, "mean_distance": 516.59, "change_mean_delay": -1.5}, {"destination": "TPA", "date": 1, "number_of_flights": 114, "mean_delay": 3.75, "mean_distance": 577.17, "change_mean_delay": 11.05}, {"destination": "TPA", "date": 3, "number_of_flights": 150, "mean_delay": 14.79, "mean_distance": 631.63, "change_mean_delay": 11.05}, {"destination": "TUL", "date": 1, "number_of_flights": 70, "mean_delay": 10.69, "mean_distance": 391.53, "change_mean_delay": -3.22}, {"destination": "TUL", "date": 3, "number_of_flights": 65, "mean_delay": 7.46, "mean_distance": 384.25, "change_mean_delay": -3.22}, {"destination": "TUS", "date": 1, "number_of_flights": 44, "mean_delay": 9.18, "mean_distance": 390.95, "change_mean_delay": -3.15}, {"destination": "TUS", "date": 3, "number_of_flights": 31, "mean_delay": 6.03, "mean_distance": 404.42, "change_mean_delay": -3.15}], "data-40bf7cbec64784a4ce18b48588df5dc9": [{"destination": "TOTAL", "date": 1, "number_of_flights": 6784, "mean_delay": 8.24, "mean_distance": 500.39, "change_mean_delay": -1.44}, {"destination": "TOTAL", "date": 3, "number_of_flights": 6960, "mean_delay": 6.8, "mean_distance": 504.71, "change_mean_delay": -1.44}]}}, {"mode": "vega-lite"});
</script>
</div>
</div>
<p>In the example shown here, each comet represents one destination airport. The head of the comet corresponds to the most recent observation of the number of flight arrivals (x-axis, shown as logarithmic scale to accommodate the wide range of observations) against the mean delay of those flights (y-axis). The tail of the comet represents a similar (x,y) datum, but from an earlier point in time. Finally, the colour of the comet is encoded to show the change in the mean delay for each airport. A tooltip with a summary of the data is shown when hovering over the head of the comet.</p>
<p>So-called mix effects can often lead to misinterpretation of aggregate numbers. In the example of flight delays, the fact that only a small change is observed in the mean delay across all airports — visualized with the right-most comet outlined in black — hides the underlying variance between airports. Note that in this example the size of each sub-population (number of flights per airport) remains relatively constant, hence the comets here only go up and down. As explained in <a href="https://storage.googleapis.com/pub-tools-public-publication-data/pdf/42901.pdf">the original article</a>, mix effects become harder to interpret when the relative size of the sub-populations change as well as their relative values. In the most extreme case this may lead to <a href="https://en.wikipedia.org/wiki/Simpson%27s_paradox">Simpson’s paradox</a>.</p>
<p>With this base implementation of comet charts in Altair, you can really go to town and combine it with other interactive graphs. Using the <a href="https://altair-viz.github.io/gallery/scatter_with_layered_histogram.html">overview-detail</a> pattern, you could plot an accompanying density plot of all the flights for a given airport. That way you can quickly zoom in to the lowest level of detail and get a better understanding of the underlying mix effects.</p>



 ]]></description>
  <category>visualization</category>
  <category>coding</category>
  <guid>https://masteringdata.ai/src/blog/posts/comet-chart.html</guid>
  <pubDate>Fri, 29 Jan 2021 00:00:00 GMT</pubDate>
  <media:content url="https://masteringdata.ai/src/blog/posts/comet-chart.png" medium="image" type="image/png" height="117" width="144"/>
</item>
<item>
  <title>The Voltron stack</title>
  <link>https://masteringdata.ai/src/blog/posts/some-post.html</link>
  <description><![CDATA[ 



<p>Data engineering isn’t sexy, yet it is a sine qua non to extract value from data. I have had my fair share of data engineering projects that did not quite live up to expectations. Data engineering, or data warehousing, is quite easy to get wrong. How hard can it be to integrate data from different sources, joining them on relevant business keys, and you are ready to develop funky machine learning models for your client. Right? Wrong. In this blog post I will sum up the most important lessons I have stumbled upon in the past 10 years. It is work in progress, so stay tuned for updates.</p>
<section id="functional-data-engineering-as-a-starting-point." class="level2">
<h2 class="anchored" data-anchor-id="functional-data-engineering-as-a-starting-point.">Functional data engineering as a starting point.</h2>
<p>In this excellent article (pdf included below), Maxime Beauchemin explains how the tenets of functional programming can be applied to data engineering. Particularly relevant are:</p>
<ul>
<li>using pure tasks in your data pipeline</li>
<li>regard table partitions as immutable objects</li>
<li>using a persistent and immutable staging areas</li>
<li>Google BigQuery as your datawarehouse storage platform</li>
</ul>
<p>I am a big fan of BigQuery. You can throw structured and unstructured data at it. It performs well with little management overhead compared to e.g.&nbsp;PostgreSQL data warehouses I had to maintain. And pricing is attractive: the cost for data-at-rest is the lowest of all cloud platform (as far as I know), hence I don’t have no qualms to really ingest as much data as possible.</p>
<p>Google’s solution design of BigQuery for datawarehouse practitioners is a good starting point. With the functional engineering approach in mind, my current best practice for data warehousing which I have applied e.g.&nbsp;for the Happi project consists of the following components:</p>
<ul>
<li>Use BigQuery’s date partitioning to ingest data into your staging schemas. Doing so, you can make optimal use of the parallel processing of BigQuery. Data generated by apps can even by ingested real-time by pushing data in newline delimited json format to BigQuery.</li>
<li>Use a lightweight workflow management library like Prefect to orchestrate and schedule all your idempotent tasks.</li>
<li>Use templated SQL for efficiently and reliably generating datamarts. Given the underlying Dremmel storage engine, we don’t need to bother with creating dimension and fact tables per se, although we still apply - Kimball’s concept of dimensional modeling).</li>
</ul>


</section>

 ]]></description>
  <guid>https://masteringdata.ai/src/blog/posts/some-post.html</guid>
  <pubDate>Mon, 07 Aug 2023 21:09:22 GMT</pubDate>
</item>
</channel>
</rss>
